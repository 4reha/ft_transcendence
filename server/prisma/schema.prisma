generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  nickname     String   @unique
  avatar       String   @default("default.png")
  wallpaper    String   @default("wallpaper.png")
  joinAt       DateTime @default(now())
  password     String
  firstname    String
  lastname     String
  Is2FAEnabled Boolean  @default(false)
  Secret2FA    String   @default("")
  coins        Int

  friends         Player[] @relation("friends") // <- Friend List
  friendsRelation Player[] @relation("friends")

  block            Player[] @relation("block") // <- Blocked Friend
  blockedsRelation Player[] @relation("block")

  statusId Int    @unique()
  status   Status @relation(fields: [statusId], references: [id])

  wins Match[] @relation(name: "wins")
  loss Match[] @relation(name: "loss")

  ownedRooms Room[]

  admins Room[] @relation(name: "room_admins")
  rooms  Room[] @relation(name: "room_members")
  bans   Ban[]

  equipedTitle Int       @default(0)
  requestsFrom Request[] @relation("requestFrom")
  requestsTo   Request[] @relation("requestTo")

  @@map("players")
}

model Request {
  id String @id

  toPlayerId Int
  toPlayer   Player @relation(fields: [toPlayerId], references: [id], name: "requestTo")

  fromPlayerId Int
  fromPlayer   Player @relation(fields: [fromPlayerId], references: [id], name: "requestFrom")

  status String @default("pending")

  receivedAt DateTime @default(now())
}

model Status {
  id Int @id @default(autoincrement())

  player Player?

  level Int    @default(1)
  // change to BigInt
  XP    BigInt @default(0)

  achivement Achivement_status[]
  title      Titles_status[]
  rank       Rank_status?
}

model Achivement {
  id Int @id @default(autoincrement())

  status Achivement_status[]

  name        String  @unique()
  icon        String
  requirement String?
  description String
  effect      String
}

model Achivement_status {
  status     Status     @relation(fields: [statusId], references: [id])
  statusId   Int
  achivement Achivement @relation(fields: [achivId], references: [id])
  achivId    Int

  locked   Boolean @default(true)
  progress Int     @default(0)

  @@id([statusId, achivId])
}

model Rank {
  id Int @id

  status Rank_status[]

  name   String  @unique()
  points Int
  avatar String?
}

model Rank_status {
  rank     Rank   @relation(fields: [rankId], references: [id])
  rankId   Int    @default(0)
  status   Status @relation(fields: [statusId], references: [id])
  statusId Int    @unique()

  current_points Int @default(0)

  @@id([rankId, statusId])
}

model Titles {
  id Int @id @default(autoincrement())

  status Titles_status[]

  name        String @unique()
  description String
  requirement String // <-- ******************************** --> \\
  effect      String
}

model Titles_status {
  status   Status @relation(fields: [statusId], references: [id])
  statusId Int
  titles   Titles @relation(fields: [titleId], references: [id])
  titleId  Int

  occupied Boolean @default(false)

  @@id([statusId, titleId])
}

model Match {
  id   Int    @id @default(autoincrement())
  type String

  winner   Int
  winnerId Player @relation(fields: [winner], references: [id], name: "wins")
  loser    Int
  loserId  Player @relation(fields: [loser], references: [id], name: "loss")

  score    String
  playedAt DateTime @default(now())
}

model Room {
  id          Int     @id @default(autoincrement())
  channelId   String  @unique()
  name        String?
  topic       String?
  key         String?
  memberLimit Int     @default(2)
  privacy     String  @default("secret")

  isChannel Boolean @default(false)

  ownerId Int
  owner   Player? @relation(fields: [ownerId], references: [id])

  admins   Player[]  @relation("room_admins")
  members  Player[]  @relation("room_members")
  messages Message[]
  bans     Ban[]

  avatar String @default("eg.jpeg")

  createdAt DateTime @default(now())
}

model Message {
  MsgId Int @id @default(autoincrement())

  sender  Int
  message String
  sendAt  DateTime @default(now())

  roomId String
  room   Room @relation(fields: [roomId], references: [channelId])
}

model Ban {
  id Int @id @default(autoincrement())

  channelId Int
  channel   Room @relation(fields: [channelId], references: [id])

  playerId Int
  player   Player @relation(fields: [playerId], references: [id])

  reason String?
}

model InvalidToken {
  token      String   @unique
  ExpireDate DateTime
}
