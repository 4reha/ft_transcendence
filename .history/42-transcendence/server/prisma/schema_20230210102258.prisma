import { Status } from "../../../.history/42-transcendence/server/prisma/schema_20230210100044"

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id       Int      @id @default(autoincrement())
  login    String   @unique
  nickname String   @unique
  avatar   String?
  joinAt   DateTime @default(now())

  friends         Player[] @relation("friends") // <- Friend List
  friendsRelation Player[] @relation("friends")

  block            Player[] @relation("block") // <- Blocked Friend
  blockedsRelation Player[] @relation("block")

  status   Status   @relation(fields: [statusId], references: [id])
  statusId Int      @unique
}

model Status {
  id     Int     @id @default(autoincrement())
  player Player?

  level    Int     @default(0)
  IsOnline Boolean @default(false)

  achivement Achivement[]
  title      Titles[]
  rank       Ranks[]
}

model Achivement {
  id Int @id @default(autoincrement())

  statusId Int
  status   Status @relation(fields: [statusId], references: [id])

  name        String
  requirement String // <-- ******************************** --> \\
  description String
  effect      String
}

model Ranks {
  id Int @id @default(autoincrement())

  statusId Int
  status   Status @relation(fields: [statusId], references: [id])

  name   String
  points Int
  avatar String?
}

model Titles {
  id Int @id @default(autoincrement())

  statusId Int
  status   Status @relation(fields: [statusId], references: [id])

  name        String
  description String
  requirement String // <-- ******************************** --> \\
  effect      String
}

model Matchs {
  id Int @id @default(autoincrement())

  player2 Int

  playerId Int
  player   Player @relation(fields: [playerId], references: [id])

  winner   Int
  scoor    String
  playerAt DateTime @default(now()) 
}

model Channel{
  channelId   Int @id @default(autoincrement())
  name        String?
  Topic       String?
  Key         String?
  memberLimit Int @default(2)
  stats       String @default("private")
  IsChannel   Boolean @default(false)

  adminId     Int
  player      Player @relation(fields: [playerId], references: [id])
  member      Player[]
}

model Chat{
  MsgId Int @id @default(autoincrement())
  playerId1 Int
  playerId2 Int
  message   String
}

model Ban {
  ChannelId Int
  channel Channel @relation(fields: [channelId], references: [ChannelId])
  PlayerId  Int
  player    Player @relation(fields: [playerId], references: [id])
  reason    String  
}