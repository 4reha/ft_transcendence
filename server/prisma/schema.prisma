generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  nickname     String   @unique
  avatar       String   @default("default.png")
  wallpaper    String   @default("wallpaper.png")
  joinAt       DateTime @default(now())
  password     String
  firstname    String
  lastname     String
  Is2FAEnabled Boolean  @default(false)
  Secret2FA    String   @default("")
  coins        Int

  friends         Player[] @relation("friends") // <- Friend List
  friendsRelation Player[] @relation("friends")

  block            Player[] @relation("block") // <- Blocked Friend
  blockedsRelation Player[] @relation("block")

  statusId Int    @unique()
  status   Status @relation(fields: [statusId], references: [id])

  wins Match[] @relation(name: "wins")
  loss Match[] @relation(name: "loss")

  rooms Room[]

  equipedTitle Int       @default(0)
  requestsFrom Request[] @relation("requestFrom")
  requestsTo   Request[] @relation("requestTo")

  @@map("players")
}

model Request {
  id String @id

  toPlayerId Int
  toPlayer   Player @relation(fields: [toPlayerId], references: [id], name: "requestTo")

  fromPlayerId Int
  fromPlayer   Player @relation(fields: [fromPlayerId], references: [id], name: "requestFrom")

  status String @default("pending")

  receivedAt DateTime @default(now())
}

model Status {
  id Int @id @default(autoincrement())

  player Player?

  level Int @default(0)

  experionPoints Int @default(0) // <---- player experion

  achivement Achivement_status[]
  title      Titles_status[]
  rank       Ranks_status[]
}

model Achivement {
  id Int @id @default(autoincrement())

  status Achivement_status[]

  name        String  @unique()
  icon        String
  requirement String?
  description String
  effect      String
}

model Achivement_status {
  status     Status     @relation(fields: [statusId], references: [id])
  statusId   Int
  achivement Achivement @relation(fields: [achivId], references: [id])
  achivId    Int

  locked   Boolean @default(true)
  progress Int     @default(0)

  @@id([statusId, achivId])
}

model Ranks {
  id Int @id @default(autoincrement())

  status Ranks_status[]

  name   String  @unique()
  points Int
  avatar String?
}

model Ranks_status {
  ranks    Ranks  @relation(fields: [rankId], references: [id])
  rankId   Int
  status   Status @relation(fields: [statusId], references: [id])
  statusId Int

  current_points Int @default(0)
  win_streak     Int @default(0)
  loss_streak    Int @default(0)

  @@id([rankId, statusId])
}

model Titles {
  id Int @id @default(autoincrement())

  status Titles_status[]

  name        String @unique()
  description String
  requirement String // <-- ******************************** --> \\
  effect      String
}

model Titles_status {
  status   Status @relation(fields: [statusId], references: [id])
  statusId Int
  titles   Titles @relation(fields: [titleId], references: [id])
  titleId  Int

  occupied Boolean @default(false)

  @@id([statusId, titleId])
}

model Match {
  id Int @id @default(autoincrement())

  winner   Int
  winnerId Player @relation(fields: [winner], references: [id], name: "wins")
  loser    Int
  loserId  Player @relation(fields: [loser], references: [id], name: "loss")

  score    String
  playerAt DateTime @default(now())
}

model Room {
  id          Int     @id @default(autoincrement())
  channelId   String  @unique()
  name        String  @unique()
  Topic       String?
  Key         String?
  memberLimit Int     @default(2)
  stats       String?

  IsChannel Boolean @default(false)

  IsRead Boolean @default(false)
  Isseen Int     @default(0)

  adminId Int[]

  member Player[]
  chats  Chat[]
  bans   Ban[]

  avatar String @default("#")
}

model Chat {
  MsgId Int @id @default(autoincrement())

  sender  Int
  message String
  sendAt  DateTime @default(now())

  roomId Int
  room   Room @relation(fields: [roomId], references: [id])
}

model Ban {
  channelId Int  @id
  channel   Room @relation(fields: [channelId], references: [id])

  playerId Int
  reason   String
}

model InvalidToken {
  token      String   @unique
  ExpireDate DateTime
}
