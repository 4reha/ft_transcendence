
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player{
  id                Int       @id @default(autoincrement())
  login             String    @unique 
  nickname          String    @unique
  avatar            String?
  joinAt            DateTime  @default(now())

  friends           Player[]  @relation("friends") // <- Friend List
  friendsRelation   Player[]  @relation("friends")  

  block             Player[]  @relation("block")  // <- Blocked Friend
  blockedsRelation  Player[]  @relation("block")

  status            Status    @relation(fields: [statusId], references: [id])
  statusId          Int       @unique
}

model Status {
  id  Int     @id @default(autoincrement())
  player      Player?

  level       Int     @default(0)
  IsOnline    Boolean @default(false)

  achivement  Achivement[]
  title       Titles[]
  rank        Ranks[]
  match       Matchs[]

}

model Achivement{
  id          Int @id @default(autoincrement())

  statusId    Int
  status      Status @relation(fields: [statusId], references: [id])

  name        String
  requirement String // <-- ******************************** --> \\
  description String
  effect      String
}

model Ranks{
  id        Int @id @default(autoincrement())

  statusId  Int
  status    Status @relation(fields: [statusId], references: [id])

  name      String
  points    Int
  avatar    String?
}

model Titles{
  id          Int @id @default(autoincrement())

  statusId    Int
  status      Status @relation(fields: [statusId], references: [id])

  name        String
  description String
  requirement String // <-- ******************************** --> \\
  effect      String
} 

model Matchs {
  id  Int @id @default(autoincrement())

  statusId    Int
  status      Status @relation(fields: [statusId], references: [id])

  winner      Int
  scoor       String
  playerAt    DateTime @default(now())
  
}

